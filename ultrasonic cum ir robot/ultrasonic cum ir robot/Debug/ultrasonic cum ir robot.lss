
ultrasonic cum ir robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000b34  00000bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800146  00800146  00000c0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1a  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094c  00000000  00000000  00001a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006be  00000000  00000000  000023b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000418  00000000  00000000  000031c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000035df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 37       	cpi	r26, 0x7E	; 126
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 47 02 	call	0x48e	; 0x48e <main>
  9e:	0c 94 98 05 	jmp	0xb30	; 0xb30 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IR_Initialize>:
}

void IR_DeInitialize()
{
	TCCR1B = 0;
	TIMSK1 = 0;
  a6:	82 e8       	ldi	r24, 0x82	; 130
  a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  ac:	81 e2       	ldi	r24, 0x21	; 33
  ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  b2:	08 95       	ret

000000b4 <__vector_13>:
	repeat_timer = 0;
	IR_WriteBuffer(ICR1);
}

ISR(TIMER1_OVF_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
	if (IR_nec_current_status == PACKET_RECVD_N_REPEAT_RECVNG)
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <IR_nec_current_status>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	29 f4       	brne	.+10     	; 0xd2 <__vector_13+0x1e>
	repeat_timer++;
  c8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
	
	if (repeat_timer == 4)
  d2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	29 f4       	brne	.+10     	; 0xe4 <__vector_13+0x30>
	{
		nec_current_state = 0;
  da:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <nec_current_state>
		IR_nec_current_status = IDLE;
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <IR_nec_current_status>
	}
}
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <IR_FlushBuffer>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  f0:	f8 94       	cli

void IR_FlushBuffer(void)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		memset((void *)IR_icr_buffer.buffer,0,sizeof(IR_icr_buffer));
  f2:	ea e4       	ldi	r30, 0x4A	; 74
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	8a e2       	ldi	r24, 0x2A	; 42
  f8:	df 01       	movw	r26, r30
  fa:	1d 92       	st	X+, r1
  fc:	8a 95       	dec	r24
  fe:	e9 f7       	brne	.-6      	; 0xfa <IR_FlushBuffer+0xa>
		IR_icr_buffer.read_index = 0;
 100:	10 a6       	std	Z+40, r1	; 0x28
		IR_icr_buffer.write_index = 0;
 102:	11 a6       	std	Z+41, r1	; 0x29
		IR_icr_buffer_status = EMPTY;
 104:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <IR_icr_buffer_status>
		nec_current_state = 0;
 108:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <nec_current_state>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 10c:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 10e:	08 95       	ret

00000110 <IR_WriteBuffer>:
	}
}

void IR_WriteBuffer(uint16_t data)
{
	IR_icr_buffer.buffer[IR_icr_buffer.write_index] = data;
 110:	aa e4       	ldi	r26, 0x4A	; 74
 112:	b1 e0       	ldi	r27, 0x01	; 1
 114:	99 96       	adiw	r26, 0x29	; 41
 116:	ec 91       	ld	r30, X
 118:	99 97       	sbiw	r26, 0x29	; 41
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	e6 5b       	subi	r30, 0xB6	; 182
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	91 83       	std	Z+1, r25	; 0x01
 126:	80 83       	st	Z, r24
	
	if (IR_icr_buffer.write_index == IR_ICR_BUFFER_SIZE - 1)
 128:	99 96       	adiw	r26, 0x29	; 41
 12a:	8c 91       	ld	r24, X
 12c:	83 31       	cpi	r24, 0x13	; 19
 12e:	19 f4       	brne	.+6      	; 0x136 <IR_WriteBuffer+0x26>
	IR_icr_buffer.write_index = 0;
 130:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <IR_icr_buffer+0x29>
 134:	05 c0       	rjmp	.+10     	; 0x140 <IR_WriteBuffer+0x30>
	else
	IR_icr_buffer.write_index++;
 136:	ea e4       	ldi	r30, 0x4A	; 74
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	81 a5       	ldd	r24, Z+41	; 0x29
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	81 a7       	std	Z+41, r24	; 0x29
	
	if (IR_icr_buffer.write_index == IR_icr_buffer.read_index)
 140:	ea e4       	ldi	r30, 0x4A	; 74
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	91 a5       	ldd	r25, Z+41	; 0x29
 146:	80 a5       	ldd	r24, Z+40	; 0x28
 148:	98 13       	cpse	r25, r24
 14a:	04 c0       	rjmp	.+8      	; 0x154 <IR_WriteBuffer+0x44>
	IR_icr_buffer_status = OVERFLOW;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <IR_icr_buffer_status>
 152:	08 95       	ret
	else
	IR_icr_buffer_status = OK;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <IR_icr_buffer_status>
 15a:	08 95       	ret

0000015c <__vector_10>:
	TCCR1B = 0;
	TIMSK1 = 0;
}

ISR (TIMER1_CAPT_vect)
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	TCNT1 = 0;
 17e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 182:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	repeat_timer = 0;
 186:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
	IR_WriteBuffer(ICR1);
 18a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 18e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 192:	0e 94 88 00 	call	0x110	; 0x110 <IR_WriteBuffer>
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <IR_ReadBuffer>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1b8:	f8 94       	cli
{
	uint16_t icr_copy;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		icr_copy = IR_icr_buffer.buffer[IR_icr_buffer.read_index];
 1ba:	aa e4       	ldi	r26, 0x4A	; 74
 1bc:	b1 e0       	ldi	r27, 0x01	; 1
 1be:	98 96       	adiw	r26, 0x28	; 40
 1c0:	ec 91       	ld	r30, X
 1c2:	98 97       	sbiw	r26, 0x28	; 40
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	e6 5b       	subi	r30, 0xB6	; 182
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	40 81       	ld	r20, Z
 1d0:	51 81       	ldd	r21, Z+1	; 0x01
		
		if (IR_icr_buffer.read_index == IR_ICR_BUFFER_SIZE - 1)
 1d2:	98 96       	adiw	r26, 0x28	; 40
 1d4:	8c 91       	ld	r24, X
 1d6:	83 31       	cpi	r24, 0x13	; 19
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <IR_ReadBuffer+0x28>
		IR_icr_buffer.read_index = 0;
 1da:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <IR_icr_buffer+0x28>
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <IR_ReadBuffer+0x32>
		else
		IR_icr_buffer.read_index++;
 1e0:	ea e4       	ldi	r30, 0x4A	; 74
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	90 a5       	ldd	r25, Z+40	; 0x28
 1e6:	9f 5f       	subi	r25, 0xFF	; 255
 1e8:	90 a7       	std	Z+40, r25	; 0x28
		
		if (IR_icr_buffer.read_index == IR_icr_buffer.write_index)
 1ea:	ea e4       	ldi	r30, 0x4A	; 74
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	20 a5       	ldd	r18, Z+40	; 0x28
 1f0:	91 a5       	ldd	r25, Z+41	; 0x29
 1f2:	29 13       	cpse	r18, r25
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <IR_ReadBuffer+0x44>
		IR_icr_buffer_status = EMPTY;
 1f6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <IR_icr_buffer_status>
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <IR_ReadBuffer+0x4a>
		else
		IR_icr_buffer_status = OK;
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <IR_icr_buffer_status>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 202:	78 94       	sei
	}
	
	return icr_copy;
}
 204:	ca 01       	movw	r24, r20
 206:	08 95       	ret

00000208 <IR_ProcessData>:

void IR_ProcessData()
{
	uint16_t icr_copy;
	
	if (IR_icr_buffer_status == OK)
 208:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <IR_icr_buffer_status>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	09 f0       	breq	.+2      	; 0x212 <IR_ProcessData+0xa>
 210:	25 c1       	rjmp	.+586    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	{
		icr_copy = IR_ReadBuffer();
 212:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <IR_ReadBuffer>
 216:	9c 01       	movw	r18, r24
		nec_current_state++;
 218:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <nec_current_state>
 21c:	9f 5f       	subi	r25, 0xFF	; 255
 21e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <nec_current_state>
		
		if (nec_current_state == 2)
 222:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	61 f4       	brne	.+24     	; 0x242 <IR_ProcessData+0x3a>
		{
			if (!(icr_copy <= IR_START_TIME_H && icr_copy >= IR_START_TIME_L))
 22a:	28 5a       	subi	r18, 0xA8	; 168
 22c:	31 46       	sbci	r19, 0x61	; 97
 22e:	29 38       	cpi	r18, 0x89	; 137
 230:	33 41       	sbci	r19, 0x13	; 19
 232:	08 f4       	brcc	.+2      	; 0x236 <IR_ProcessData+0x2e>
 234:	19 c1       	rjmp	.+562    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			{
				nec_current_state = 0;
 236:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <nec_current_state>
				IR_nec_current_status = TIMING_ERR;
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <IR_nec_current_status>
 240:	08 95       	ret
			}
		}
		else if (nec_current_state <= 34 && nec_current_state >=  3)
 242:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 246:	83 32       	cpi	r24, 0x23	; 35
 248:	08 f0       	brcs	.+2      	; 0x24c <IR_ProcessData+0x44>
 24a:	b8 c0       	rjmp	.+368    	; 0x3bc <IR_ProcessData+0x1b4>
 24c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	08 f4       	brcc	.+2      	; 0x256 <IR_ProcessData+0x4e>
 254:	b3 c0       	rjmp	.+358    	; 0x3bc <IR_ProcessData+0x1b4>
		{
			if (icr_copy <= IR_HIGH_TIME_H && icr_copy >= IR_HIGH_TIME_L)
 256:	c9 01       	movw	r24, r18
 258:	80 5a       	subi	r24, 0xA0	; 160
 25a:	9f 40       	sbci	r25, 0x0F	; 15
 25c:	81 32       	cpi	r24, 0x21	; 33
 25e:	93 40       	sbci	r25, 0x03	; 3
 260:	08 f0       	brcs	.+2      	; 0x264 <IR_ProcessData+0x5c>
 262:	4c c0       	rjmp	.+152    	; 0x2fc <IR_ProcessData+0xf4>
			{
				if (nec_current_state <= 10)
 264:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 268:	8b 30       	cpi	r24, 0x0B	; 11
 26a:	80 f4       	brcc	.+32     	; 0x28c <IR_ProcessData+0x84>
				IR_nec_current_packet.addr_l |= (1 << (nec_current_state - 3));
 26c:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <nec_current_state>
 270:	e4 e7       	ldi	r30, 0x74	; 116
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	30 81       	ld	r19, Z
 276:	23 50       	subi	r18, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <IR_ProcessData+0x7a>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	2a 95       	dec	r18
 284:	e2 f7       	brpl	.-8      	; 0x27e <IR_ProcessData+0x76>
 286:	83 2b       	or	r24, r19
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret
				else if (nec_current_state <= 18)
 28c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 290:	83 31       	cpi	r24, 0x13	; 19
 292:	80 f4       	brcc	.+32     	; 0x2b4 <IR_ProcessData+0xac>
				IR_nec_current_packet.addr_h |= (1 << (nec_current_state - 11));
 294:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <nec_current_state>
 298:	e4 e7       	ldi	r30, 0x74	; 116
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	31 81       	ldd	r19, Z+1	; 0x01
 29e:	2b 50       	subi	r18, 0x0B	; 11
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <IR_ProcessData+0xa2>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	2a 95       	dec	r18
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <IR_ProcessData+0x9e>
 2ae:	83 2b       	or	r24, r19
 2b0:	81 83       	std	Z+1, r24	; 0x01
 2b2:	08 95       	ret
				else if (nec_current_state <= 26)
 2b4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 2b8:	8b 31       	cpi	r24, 0x1B	; 27
 2ba:	80 f4       	brcc	.+32     	; 0x2dc <IR_ProcessData+0xd4>
				IR_nec_current_packet.cmd |= (1 << (nec_current_state  - 19));
 2bc:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <nec_current_state>
 2c0:	e4 e7       	ldi	r30, 0x74	; 116
 2c2:	f1 e0       	ldi	r31, 0x01	; 1
 2c4:	32 81       	ldd	r19, Z+2	; 0x02
 2c6:	23 51       	subi	r18, 0x13	; 19
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <IR_ProcessData+0xca>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	2a 95       	dec	r18
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <IR_ProcessData+0xc6>
 2d6:	83 2b       	or	r24, r19
 2d8:	82 83       	std	Z+2, r24	; 0x02
 2da:	08 95       	ret
				else
				IR_nec_current_packet.cmd_inv |= (1 << (nec_current_state - 27));
 2dc:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <nec_current_state>
 2e0:	e4 e7       	ldi	r30, 0x74	; 116
 2e2:	f1 e0       	ldi	r31, 0x01	; 1
 2e4:	33 81       	ldd	r19, Z+3	; 0x03
 2e6:	2b 51       	subi	r18, 0x1B	; 27
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <IR_ProcessData+0xea>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	2a 95       	dec	r18
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <IR_ProcessData+0xe6>
 2f6:	83 2b       	or	r24, r19
 2f8:	83 83       	std	Z+3, r24	; 0x03
 2fa:	08 95       	ret
			}
			else if (icr_copy <= IR_LOW_TIME_H && icr_copy >= IR_LOW_TIME_L)
 2fc:	28 50       	subi	r18, 0x08	; 8
 2fe:	37 40       	sbci	r19, 0x07	; 7
 300:	29 35       	cpi	r18, 0x59	; 89
 302:	32 40       	sbci	r19, 0x02	; 2
 304:	08 f0       	brcs	.+2      	; 0x308 <IR_ProcessData+0x100>
 306:	54 c0       	rjmp	.+168    	; 0x3b0 <IR_ProcessData+0x1a8>
			{
				if (nec_current_state <= 10)
 308:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 30c:	8b 30       	cpi	r24, 0x0B	; 11
 30e:	90 f4       	brcc	.+36     	; 0x334 <IR_ProcessData+0x12c>
				IR_nec_current_packet.addr_l &= ~(1 << (nec_current_state - 3));
 310:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <nec_current_state>
 314:	e4 e7       	ldi	r30, 0x74	; 116
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	30 81       	ld	r19, Z
 31a:	23 50       	subi	r18, 0x03	; 3
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <IR_ProcessData+0x11e>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <IR_ProcessData+0x11a>
 32a:	80 95       	com	r24
 32c:	90 95       	com	r25
 32e:	83 23       	and	r24, r19
 330:	80 83       	st	Z, r24
 332:	08 95       	ret
				else if (nec_current_state <= 18)
 334:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 338:	83 31       	cpi	r24, 0x13	; 19
 33a:	90 f4       	brcc	.+36     	; 0x360 <IR_ProcessData+0x158>
				IR_nec_current_packet.addr_h &= ~(1 << (nec_current_state - 11));
 33c:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <nec_current_state>
 340:	e4 e7       	ldi	r30, 0x74	; 116
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	31 81       	ldd	r19, Z+1	; 0x01
 346:	2b 50       	subi	r18, 0x0B	; 11
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <IR_ProcessData+0x14a>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	2a 95       	dec	r18
 354:	e2 f7       	brpl	.-8      	; 0x34e <IR_ProcessData+0x146>
 356:	80 95       	com	r24
 358:	90 95       	com	r25
 35a:	83 23       	and	r24, r19
 35c:	81 83       	std	Z+1, r24	; 0x01
 35e:	08 95       	ret
				else if (nec_current_state <= 26)
 360:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 364:	8b 31       	cpi	r24, 0x1B	; 27
 366:	90 f4       	brcc	.+36     	; 0x38c <IR_ProcessData+0x184>
				IR_nec_current_packet.cmd &= ~(1 << (nec_current_state - 19));
 368:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <nec_current_state>
 36c:	e4 e7       	ldi	r30, 0x74	; 116
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	32 81       	ldd	r19, Z+2	; 0x02
 372:	23 51       	subi	r18, 0x13	; 19
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <IR_ProcessData+0x176>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	2a 95       	dec	r18
 380:	e2 f7       	brpl	.-8      	; 0x37a <IR_ProcessData+0x172>
 382:	80 95       	com	r24
 384:	90 95       	com	r25
 386:	83 23       	and	r24, r19
 388:	82 83       	std	Z+2, r24	; 0x02
 38a:	08 95       	ret
				else
				IR_nec_current_packet.cmd_inv &= ~(1 << (nec_current_state - 27));
 38c:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <nec_current_state>
 390:	e4 e7       	ldi	r30, 0x74	; 116
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	33 81       	ldd	r19, Z+3	; 0x03
 396:	2b 51       	subi	r18, 0x1B	; 27
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <IR_ProcessData+0x19a>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	2a 95       	dec	r18
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <IR_ProcessData+0x196>
 3a6:	80 95       	com	r24
 3a8:	90 95       	com	r25
 3aa:	83 23       	and	r24, r19
 3ac:	83 83       	std	Z+3, r24	; 0x03
 3ae:	08 95       	ret
			}
			else
			{
				nec_current_state = 0;
 3b0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <nec_current_state>
				IR_nec_current_status = TIMING_ERR;
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <IR_nec_current_status>
 3ba:	08 95       	ret
			}
		}
		else if (nec_current_state == 35)
 3bc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 3c0:	83 32       	cpi	r24, 0x23	; 35
 3c2:	99 f4       	brne	.+38     	; 0x3ea <IR_ProcessData+0x1e2>
		{
			if (IR_nec_current_packet.cmd == (unsigned char)~(IR_nec_current_packet.cmd_inv))
 3c4:	e4 e7       	ldi	r30, 0x74	; 116
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	92 81       	ldd	r25, Z+2	; 0x02
 3ca:	83 81       	ldd	r24, Z+3	; 0x03
 3cc:	80 95       	com	r24
 3ce:	98 13       	cpse	r25, r24
 3d0:	06 c0       	rjmp	.+12     	; 0x3de <IR_ProcessData+0x1d6>
			{
				IR_nec_current_status = PACKET_RECVD;
 3d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <IR_nec_current_status>
				IR_nec_new_data = true;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <IR_nec_new_data>
 3dc:	08 95       	ret
			}
			else
			{
				nec_current_state = 0;
 3de:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <nec_current_state>
				IR_nec_current_status = CHKSM_ERR;
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <IR_nec_current_status>
 3e8:	08 95       	ret
			}
		}
		else if (nec_current_state == 36)
 3ea:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 3ee:	84 32       	cpi	r24, 0x24	; 36
 3f0:	a9 f4       	brne	.+42     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		{
			if (!(icr_copy <= IR_REPEAT1_TIME_H && icr_copy >= IR_REPEAT1_TIME_L))
 3f2:	c9 01       	movw	r24, r18
 3f4:	80 52       	subi	r24, 0x20	; 32
 3f6:	9e 44       	sbci	r25, 0x4E	; 78
 3f8:	81 3a       	cpi	r24, 0xA1	; 161
 3fa:	9f 40       	sbci	r25, 0x0F	; 15
 3fc:	a8 f1       	brcs	.+106    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			{
				if (icr_copy <= IR_START_TIME_H && icr_copy >= IR_START_TIME_L)
 3fe:	28 5a       	subi	r18, 0xA8	; 168
 400:	31 46       	sbci	r19, 0x61	; 97
 402:	29 38       	cpi	r18, 0x89	; 137
 404:	33 41       	sbci	r19, 0x13	; 19
 406:	20 f4       	brcc	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				{
					nec_current_state = 2;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <nec_current_state>
 40e:	08 95       	ret
				}
				else
				{
					nec_current_state = 0;
 410:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <nec_current_state>
					IR_nec_current_status = TIMING_ERR;
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <IR_nec_current_status>
 41a:	08 95       	ret
				}
			}
		}
		else if (nec_current_state == 37)
 41c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <nec_current_state>
 420:	85 32       	cpi	r24, 0x25	; 37
 422:	11 f5       	brne	.+68     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		{
			if (icr_copy <= IR_REPEAT2_TIME_H && icr_copy >= IR_REPEAT2_TIME_L)
 424:	c9 01       	movw	r24, r18
 426:	80 53       	subi	r24, 0x30	; 48
 428:	92 4f       	sbci	r25, 0xF2	; 242
 42a:	89 3b       	cpi	r24, 0xB9	; 185
 42c:	9b 40       	sbci	r25, 0x0B	; 11
 42e:	38 f4       	brcc	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			{
				nec_current_state = 35;
 430:	83 e2       	ldi	r24, 0x23	; 35
 432:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <nec_current_state>
				IR_nec_current_status = PACKET_RECVD_N_REPEAT_RECVNG;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <IR_nec_current_status>
 43c:	08 95       	ret
			}
			else if (icr_copy <= IR_START_TIME_H && icr_copy >= IR_START_TIME_L)
 43e:	28 5a       	subi	r18, 0xA8	; 168
 440:	31 46       	sbci	r19, 0x61	; 97
 442:	29 38       	cpi	r18, 0x89	; 137
 444:	33 41       	sbci	r19, 0x13	; 19
 446:	20 f4       	brcc	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			{
				nec_current_state = 2;
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <nec_current_state>
 44e:	08 95       	ret
			}
			else
			{
				nec_current_state = 0;
 450:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <nec_current_state>
				IR_nec_current_status = TIMING_ERR;
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <IR_nec_current_status>
 45a:	08 95       	ret
			}
		}
	}
	else if (IR_icr_buffer_status == OVERFLOW)
 45c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <IR_icr_buffer_status>
 460:	82 30       	cpi	r24, 0x02	; 2
 462:	11 f4       	brne	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	{
		IR_FlushBuffer();
 464:	0e 94 78 00 	call	0xf0	; 0xf0 <IR_FlushBuffer>
 468:	08 95       	ret

0000046a <uart_putchar>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE);

static int uart_putchar(char c, FILE *stream)
{
 46a:	cf 93       	push	r28
 46c:	c8 2f       	mov	r28, r24
	if (c == '\n')
 46e:	8a 30       	cpi	r24, 0x0A	; 10
 470:	19 f4       	brne	.+6      	; 0x478 <uart_putchar+0xe>
	uart_putchar('\r', stream);
 472:	8d e0       	ldi	r24, 0x0D	; 13
 474:	0e 94 35 02 	call	0x46a	; 0x46a <uart_putchar>
	loop_until_bit_is_set(UCSR0A, UDRE0);
 478:	e0 ec       	ldi	r30, 0xC0	; 192
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	85 ff       	sbrs	r24, 5
 480:	fd cf       	rjmp	.-6      	; 0x47c <uart_putchar+0x12>
	UDR0 = c;
 482:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <main>:


int main(void)
{
	UART_Initialize();
 48e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_Initialize>
	stdout = &mystdout;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__iob+0x3>
 49a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__iob+0x2>
	
	IR_Initialize();
 49e:	0e 94 53 00 	call	0xa6	; 0xa6 <IR_Initialize>
	
	sei();
 4a2:	78 94       	sei
	printf("hi\n");
 4a4:	8f e0       	ldi	r24, 0x0F	; 15
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 a0 02 	call	0x540	; 0x540 <puts>
	{
		IR_ProcessData();
		if (IR_nec_new_data == true || IR_nec_current_status == PACKET_RECVD_N_REPEAT_RECVNG)
		{
			IR_nec_new_data = false;
			printf("nec_addrl=%u nec_addrh=%u nec_cmd=%u nec_cmdinv=%u\n",IR_nec_current_packet.addr_h,IR_nec_current_packet.addr_l,IR_nec_current_packet.cmd,IR_nec_current_packet.cmd_inv);
 4ac:	c4 e7       	ldi	r28, 0x74	; 116
 4ae:	d1 e0       	ldi	r29, 0x01	; 1
 4b0:	02 e1       	ldi	r16, 0x12	; 18
 4b2:	11 e0       	ldi	r17, 0x01	; 1
	sei();
	printf("hi\n");
	
	while (1)
	{
		IR_ProcessData();
 4b4:	0e 94 04 01 	call	0x208	; 0x208 <IR_ProcessData>
		if (IR_nec_new_data == true || IR_nec_current_status == PACKET_RECVD_N_REPEAT_RECVNG)
 4b8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <IR_nec_new_data>
 4bc:	81 11       	cpse	r24, r1
 4be:	04 c0       	rjmp	.+8      	; 0x4c8 <main+0x3a>
 4c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <IR_nec_current_status>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	b1 f7       	brne	.-20     	; 0x4b4 <main+0x26>
		{
			IR_nec_new_data = false;
 4c8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <IR_nec_new_data>
			printf("nec_addrl=%u nec_addrh=%u nec_cmd=%u nec_cmdinv=%u\n",IR_nec_current_packet.addr_h,IR_nec_current_packet.addr_l,IR_nec_current_packet.cmd,IR_nec_current_packet.cmd_inv);
 4cc:	3b 81       	ldd	r19, Y+3	; 0x03
 4ce:	2a 81       	ldd	r18, Y+2	; 0x02
 4d0:	98 81       	ld	r25, Y
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	1f 92       	push	r1
 4d6:	3f 93       	push	r19
 4d8:	1f 92       	push	r1
 4da:	2f 93       	push	r18
 4dc:	1f 92       	push	r1
 4de:	9f 93       	push	r25
 4e0:	1f 92       	push	r1
 4e2:	8f 93       	push	r24
 4e4:	1f 93       	push	r17
 4e6:	0f 93       	push	r16
 4e8:	0e 94 8a 02 	call	0x514	; 0x514 <printf>
 4ec:	8d b7       	in	r24, 0x3d	; 61
 4ee:	9e b7       	in	r25, 0x3e	; 62
 4f0:	0a 96       	adiw	r24, 0x0a	; 10
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	9e bf       	out	0x3e, r25	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	8d bf       	out	0x3d, r24	; 61
 4fc:	db cf       	rjmp	.-74     	; 0x4b4 <main+0x26>

000004fe <UART_Initialize>:

#include "uart.h"

void UART_Initialize()
{
	UBRR0H = (uint8_t) (UBBR_VALUE >> 8);
 4fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) UBBR_VALUE;
 502:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 506:	88 e1       	ldi	r24, 0x18	; 24
 508:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1 << UPM01) | (1 << UCSZ01) | (1 << UCSZ00) | (1 << USBS0);
 50c:	8e e2       	ldi	r24, 0x2E	; 46
 50e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 512:	08 95       	ret

00000514 <printf>:
 514:	a0 e0       	ldi	r26, 0x00	; 0
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e0 e9       	ldi	r30, 0x90	; 144
 51a:	f2 e0       	ldi	r31, 0x02	; 2
 51c:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__prologue_saves__+0x20>
 520:	ae 01       	movw	r20, r28
 522:	4b 5f       	subi	r20, 0xFB	; 251
 524:	5f 4f       	sbci	r21, 0xFF	; 255
 526:	fa 01       	movw	r30, r20
 528:	61 91       	ld	r22, Z+
 52a:	71 91       	ld	r23, Z+
 52c:	af 01       	movw	r20, r30
 52e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__iob+0x2>
 532:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__iob+0x3>
 536:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <vfprintf>
 53a:	e2 e0       	ldi	r30, 0x02	; 2
 53c:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__epilogue_restores__+0x20>

00000540 <puts>:
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__iob+0x2>
 54c:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <__iob+0x3>
 550:	23 81       	ldd	r18, Z+3	; 0x03
 552:	21 ff       	sbrs	r18, 1
 554:	1b c0       	rjmp	.+54     	; 0x58c <puts+0x4c>
 556:	8c 01       	movw	r16, r24
 558:	d0 e0       	ldi	r29, 0x00	; 0
 55a:	c0 e0       	ldi	r28, 0x00	; 0
 55c:	f8 01       	movw	r30, r16
 55e:	81 91       	ld	r24, Z+
 560:	8f 01       	movw	r16, r30
 562:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <__iob+0x2>
 566:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <__iob+0x3>
 56a:	db 01       	movw	r26, r22
 56c:	18 96       	adiw	r26, 0x08	; 8
 56e:	ed 91       	ld	r30, X+
 570:	fc 91       	ld	r31, X
 572:	19 97       	sbiw	r26, 0x09	; 9
 574:	88 23       	and	r24, r24
 576:	31 f0       	breq	.+12     	; 0x584 <puts+0x44>
 578:	09 95       	icall
 57a:	89 2b       	or	r24, r25
 57c:	79 f3       	breq	.-34     	; 0x55c <puts+0x1c>
 57e:	df ef       	ldi	r29, 0xFF	; 255
 580:	cf ef       	ldi	r28, 0xFF	; 255
 582:	ec cf       	rjmp	.-40     	; 0x55c <puts+0x1c>
 584:	8a e0       	ldi	r24, 0x0A	; 10
 586:	09 95       	icall
 588:	89 2b       	or	r24, r25
 58a:	19 f0       	breq	.+6      	; 0x592 <puts+0x52>
 58c:	8f ef       	ldi	r24, 0xFF	; 255
 58e:	9f ef       	ldi	r25, 0xFF	; 255
 590:	02 c0       	rjmp	.+4      	; 0x596 <puts+0x56>
 592:	8d 2f       	mov	r24, r29
 594:	9c 2f       	mov	r25, r28
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <vfprintf>:
 5a0:	ab e0       	ldi	r26, 0x0B	; 11
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	e6 ed       	ldi	r30, 0xD6	; 214
 5a6:	f2 e0       	ldi	r31, 0x02	; 2
 5a8:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__prologue_saves__>
 5ac:	6c 01       	movw	r12, r24
 5ae:	7b 01       	movw	r14, r22
 5b0:	8a 01       	movw	r16, r20
 5b2:	fc 01       	movw	r30, r24
 5b4:	17 82       	std	Z+7, r1	; 0x07
 5b6:	16 82       	std	Z+6, r1	; 0x06
 5b8:	83 81       	ldd	r24, Z+3	; 0x03
 5ba:	81 ff       	sbrs	r24, 1
 5bc:	cc c1       	rjmp	.+920    	; 0x956 <__stack+0x57>
 5be:	ce 01       	movw	r24, r28
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	3c 01       	movw	r6, r24
 5c4:	f6 01       	movw	r30, r12
 5c6:	93 81       	ldd	r25, Z+3	; 0x03
 5c8:	f7 01       	movw	r30, r14
 5ca:	93 fd       	sbrc	r25, 3
 5cc:	85 91       	lpm	r24, Z+
 5ce:	93 ff       	sbrs	r25, 3
 5d0:	81 91       	ld	r24, Z+
 5d2:	7f 01       	movw	r14, r30
 5d4:	88 23       	and	r24, r24
 5d6:	09 f4       	brne	.+2      	; 0x5da <vfprintf+0x3a>
 5d8:	ba c1       	rjmp	.+884    	; 0x94e <__stack+0x4f>
 5da:	85 32       	cpi	r24, 0x25	; 37
 5dc:	39 f4       	brne	.+14     	; 0x5ec <vfprintf+0x4c>
 5de:	93 fd       	sbrc	r25, 3
 5e0:	85 91       	lpm	r24, Z+
 5e2:	93 ff       	sbrs	r25, 3
 5e4:	81 91       	ld	r24, Z+
 5e6:	7f 01       	movw	r14, r30
 5e8:	85 32       	cpi	r24, 0x25	; 37
 5ea:	29 f4       	brne	.+10     	; 0x5f6 <vfprintf+0x56>
 5ec:	b6 01       	movw	r22, r12
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 5f4:	e7 cf       	rjmp	.-50     	; 0x5c4 <vfprintf+0x24>
 5f6:	91 2c       	mov	r9, r1
 5f8:	21 2c       	mov	r2, r1
 5fa:	31 2c       	mov	r3, r1
 5fc:	ff e1       	ldi	r31, 0x1F	; 31
 5fe:	f3 15       	cp	r31, r3
 600:	d8 f0       	brcs	.+54     	; 0x638 <vfprintf+0x98>
 602:	8b 32       	cpi	r24, 0x2B	; 43
 604:	79 f0       	breq	.+30     	; 0x624 <vfprintf+0x84>
 606:	38 f4       	brcc	.+14     	; 0x616 <vfprintf+0x76>
 608:	80 32       	cpi	r24, 0x20	; 32
 60a:	79 f0       	breq	.+30     	; 0x62a <vfprintf+0x8a>
 60c:	83 32       	cpi	r24, 0x23	; 35
 60e:	a1 f4       	brne	.+40     	; 0x638 <vfprintf+0x98>
 610:	23 2d       	mov	r18, r3
 612:	20 61       	ori	r18, 0x10	; 16
 614:	1d c0       	rjmp	.+58     	; 0x650 <vfprintf+0xb0>
 616:	8d 32       	cpi	r24, 0x2D	; 45
 618:	61 f0       	breq	.+24     	; 0x632 <vfprintf+0x92>
 61a:	80 33       	cpi	r24, 0x30	; 48
 61c:	69 f4       	brne	.+26     	; 0x638 <vfprintf+0x98>
 61e:	23 2d       	mov	r18, r3
 620:	21 60       	ori	r18, 0x01	; 1
 622:	16 c0       	rjmp	.+44     	; 0x650 <vfprintf+0xb0>
 624:	83 2d       	mov	r24, r3
 626:	82 60       	ori	r24, 0x02	; 2
 628:	38 2e       	mov	r3, r24
 62a:	e3 2d       	mov	r30, r3
 62c:	e4 60       	ori	r30, 0x04	; 4
 62e:	3e 2e       	mov	r3, r30
 630:	2a c0       	rjmp	.+84     	; 0x686 <vfprintf+0xe6>
 632:	f3 2d       	mov	r31, r3
 634:	f8 60       	ori	r31, 0x08	; 8
 636:	1d c0       	rjmp	.+58     	; 0x672 <vfprintf+0xd2>
 638:	37 fc       	sbrc	r3, 7
 63a:	2d c0       	rjmp	.+90     	; 0x696 <vfprintf+0xf6>
 63c:	20 ed       	ldi	r18, 0xD0	; 208
 63e:	28 0f       	add	r18, r24
 640:	2a 30       	cpi	r18, 0x0A	; 10
 642:	40 f0       	brcs	.+16     	; 0x654 <vfprintf+0xb4>
 644:	8e 32       	cpi	r24, 0x2E	; 46
 646:	b9 f4       	brne	.+46     	; 0x676 <vfprintf+0xd6>
 648:	36 fc       	sbrc	r3, 6
 64a:	81 c1       	rjmp	.+770    	; 0x94e <__stack+0x4f>
 64c:	23 2d       	mov	r18, r3
 64e:	20 64       	ori	r18, 0x40	; 64
 650:	32 2e       	mov	r3, r18
 652:	19 c0       	rjmp	.+50     	; 0x686 <vfprintf+0xe6>
 654:	36 fe       	sbrs	r3, 6
 656:	06 c0       	rjmp	.+12     	; 0x664 <vfprintf+0xc4>
 658:	8a e0       	ldi	r24, 0x0A	; 10
 65a:	98 9e       	mul	r9, r24
 65c:	20 0d       	add	r18, r0
 65e:	11 24       	eor	r1, r1
 660:	92 2e       	mov	r9, r18
 662:	11 c0       	rjmp	.+34     	; 0x686 <vfprintf+0xe6>
 664:	ea e0       	ldi	r30, 0x0A	; 10
 666:	2e 9e       	mul	r2, r30
 668:	20 0d       	add	r18, r0
 66a:	11 24       	eor	r1, r1
 66c:	22 2e       	mov	r2, r18
 66e:	f3 2d       	mov	r31, r3
 670:	f0 62       	ori	r31, 0x20	; 32
 672:	3f 2e       	mov	r3, r31
 674:	08 c0       	rjmp	.+16     	; 0x686 <vfprintf+0xe6>
 676:	8c 36       	cpi	r24, 0x6C	; 108
 678:	21 f4       	brne	.+8      	; 0x682 <vfprintf+0xe2>
 67a:	83 2d       	mov	r24, r3
 67c:	80 68       	ori	r24, 0x80	; 128
 67e:	38 2e       	mov	r3, r24
 680:	02 c0       	rjmp	.+4      	; 0x686 <vfprintf+0xe6>
 682:	88 36       	cpi	r24, 0x68	; 104
 684:	41 f4       	brne	.+16     	; 0x696 <vfprintf+0xf6>
 686:	f7 01       	movw	r30, r14
 688:	93 fd       	sbrc	r25, 3
 68a:	85 91       	lpm	r24, Z+
 68c:	93 ff       	sbrs	r25, 3
 68e:	81 91       	ld	r24, Z+
 690:	7f 01       	movw	r14, r30
 692:	81 11       	cpse	r24, r1
 694:	b3 cf       	rjmp	.-154    	; 0x5fc <vfprintf+0x5c>
 696:	98 2f       	mov	r25, r24
 698:	9f 7d       	andi	r25, 0xDF	; 223
 69a:	95 54       	subi	r25, 0x45	; 69
 69c:	93 30       	cpi	r25, 0x03	; 3
 69e:	28 f4       	brcc	.+10     	; 0x6aa <vfprintf+0x10a>
 6a0:	0c 5f       	subi	r16, 0xFC	; 252
 6a2:	1f 4f       	sbci	r17, 0xFF	; 255
 6a4:	9f e3       	ldi	r25, 0x3F	; 63
 6a6:	99 83       	std	Y+1, r25	; 0x01
 6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <vfprintf+0x124>
 6aa:	83 36       	cpi	r24, 0x63	; 99
 6ac:	31 f0       	breq	.+12     	; 0x6ba <vfprintf+0x11a>
 6ae:	83 37       	cpi	r24, 0x73	; 115
 6b0:	71 f0       	breq	.+28     	; 0x6ce <vfprintf+0x12e>
 6b2:	83 35       	cpi	r24, 0x53	; 83
 6b4:	09 f0       	breq	.+2      	; 0x6b8 <vfprintf+0x118>
 6b6:	59 c0       	rjmp	.+178    	; 0x76a <vfprintf+0x1ca>
 6b8:	21 c0       	rjmp	.+66     	; 0x6fc <vfprintf+0x15c>
 6ba:	f8 01       	movw	r30, r16
 6bc:	80 81       	ld	r24, Z
 6be:	89 83       	std	Y+1, r24	; 0x01
 6c0:	0e 5f       	subi	r16, 0xFE	; 254
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	88 24       	eor	r8, r8
 6c6:	83 94       	inc	r8
 6c8:	91 2c       	mov	r9, r1
 6ca:	53 01       	movw	r10, r6
 6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <vfprintf+0x154>
 6ce:	28 01       	movw	r4, r16
 6d0:	f2 e0       	ldi	r31, 0x02	; 2
 6d2:	4f 0e       	add	r4, r31
 6d4:	51 1c       	adc	r5, r1
 6d6:	f8 01       	movw	r30, r16
 6d8:	a0 80       	ld	r10, Z
 6da:	b1 80       	ldd	r11, Z+1	; 0x01
 6dc:	36 fe       	sbrs	r3, 6
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <vfprintf+0x146>
 6e0:	69 2d       	mov	r22, r9
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <vfprintf+0x14a>
 6e6:	6f ef       	ldi	r22, 0xFF	; 255
 6e8:	7f ef       	ldi	r23, 0xFF	; 255
 6ea:	c5 01       	movw	r24, r10
 6ec:	0e 94 bc 04 	call	0x978	; 0x978 <strnlen>
 6f0:	4c 01       	movw	r8, r24
 6f2:	82 01       	movw	r16, r4
 6f4:	f3 2d       	mov	r31, r3
 6f6:	ff 77       	andi	r31, 0x7F	; 127
 6f8:	3f 2e       	mov	r3, r31
 6fa:	16 c0       	rjmp	.+44     	; 0x728 <vfprintf+0x188>
 6fc:	28 01       	movw	r4, r16
 6fe:	22 e0       	ldi	r18, 0x02	; 2
 700:	42 0e       	add	r4, r18
 702:	51 1c       	adc	r5, r1
 704:	f8 01       	movw	r30, r16
 706:	a0 80       	ld	r10, Z
 708:	b1 80       	ldd	r11, Z+1	; 0x01
 70a:	36 fe       	sbrs	r3, 6
 70c:	03 c0       	rjmp	.+6      	; 0x714 <vfprintf+0x174>
 70e:	69 2d       	mov	r22, r9
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <vfprintf+0x178>
 714:	6f ef       	ldi	r22, 0xFF	; 255
 716:	7f ef       	ldi	r23, 0xFF	; 255
 718:	c5 01       	movw	r24, r10
 71a:	0e 94 b1 04 	call	0x962	; 0x962 <strnlen_P>
 71e:	4c 01       	movw	r8, r24
 720:	f3 2d       	mov	r31, r3
 722:	f0 68       	ori	r31, 0x80	; 128
 724:	3f 2e       	mov	r3, r31
 726:	82 01       	movw	r16, r4
 728:	33 fc       	sbrc	r3, 3
 72a:	1b c0       	rjmp	.+54     	; 0x762 <vfprintf+0x1c2>
 72c:	82 2d       	mov	r24, r2
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	88 16       	cp	r8, r24
 732:	99 06       	cpc	r9, r25
 734:	b0 f4       	brcc	.+44     	; 0x762 <vfprintf+0x1c2>
 736:	b6 01       	movw	r22, r12
 738:	80 e2       	ldi	r24, 0x20	; 32
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 740:	2a 94       	dec	r2
 742:	f4 cf       	rjmp	.-24     	; 0x72c <vfprintf+0x18c>
 744:	f5 01       	movw	r30, r10
 746:	37 fc       	sbrc	r3, 7
 748:	85 91       	lpm	r24, Z+
 74a:	37 fe       	sbrs	r3, 7
 74c:	81 91       	ld	r24, Z+
 74e:	5f 01       	movw	r10, r30
 750:	b6 01       	movw	r22, r12
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 758:	21 10       	cpse	r2, r1
 75a:	2a 94       	dec	r2
 75c:	21 e0       	ldi	r18, 0x01	; 1
 75e:	82 1a       	sub	r8, r18
 760:	91 08       	sbc	r9, r1
 762:	81 14       	cp	r8, r1
 764:	91 04       	cpc	r9, r1
 766:	71 f7       	brne	.-36     	; 0x744 <vfprintf+0x1a4>
 768:	e8 c0       	rjmp	.+464    	; 0x93a <__stack+0x3b>
 76a:	84 36       	cpi	r24, 0x64	; 100
 76c:	11 f0       	breq	.+4      	; 0x772 <vfprintf+0x1d2>
 76e:	89 36       	cpi	r24, 0x69	; 105
 770:	41 f5       	brne	.+80     	; 0x7c2 <vfprintf+0x222>
 772:	f8 01       	movw	r30, r16
 774:	37 fe       	sbrs	r3, 7
 776:	07 c0       	rjmp	.+14     	; 0x786 <vfprintf+0x1e6>
 778:	60 81       	ld	r22, Z
 77a:	71 81       	ldd	r23, Z+1	; 0x01
 77c:	82 81       	ldd	r24, Z+2	; 0x02
 77e:	93 81       	ldd	r25, Z+3	; 0x03
 780:	0c 5f       	subi	r16, 0xFC	; 252
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	08 c0       	rjmp	.+16     	; 0x796 <vfprintf+0x1f6>
 786:	60 81       	ld	r22, Z
 788:	71 81       	ldd	r23, Z+1	; 0x01
 78a:	07 2e       	mov	r0, r23
 78c:	00 0c       	add	r0, r0
 78e:	88 0b       	sbc	r24, r24
 790:	99 0b       	sbc	r25, r25
 792:	0e 5f       	subi	r16, 0xFE	; 254
 794:	1f 4f       	sbci	r17, 0xFF	; 255
 796:	f3 2d       	mov	r31, r3
 798:	ff 76       	andi	r31, 0x6F	; 111
 79a:	3f 2e       	mov	r3, r31
 79c:	97 ff       	sbrs	r25, 7
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <vfprintf+0x212>
 7a0:	90 95       	com	r25
 7a2:	80 95       	com	r24
 7a4:	70 95       	com	r23
 7a6:	61 95       	neg	r22
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	f0 68       	ori	r31, 0x80	; 128
 7b0:	3f 2e       	mov	r3, r31
 7b2:	2a e0       	ldi	r18, 0x0A	; 10
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	a3 01       	movw	r20, r6
 7b8:	0e 94 03 05 	call	0xa06	; 0xa06 <__ultoa_invert>
 7bc:	88 2e       	mov	r8, r24
 7be:	86 18       	sub	r8, r6
 7c0:	45 c0       	rjmp	.+138    	; 0x84c <vfprintf+0x2ac>
 7c2:	85 37       	cpi	r24, 0x75	; 117
 7c4:	31 f4       	brne	.+12     	; 0x7d2 <vfprintf+0x232>
 7c6:	23 2d       	mov	r18, r3
 7c8:	2f 7e       	andi	r18, 0xEF	; 239
 7ca:	b2 2e       	mov	r11, r18
 7cc:	2a e0       	ldi	r18, 0x0A	; 10
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	25 c0       	rjmp	.+74     	; 0x81c <vfprintf+0x27c>
 7d2:	93 2d       	mov	r25, r3
 7d4:	99 7f       	andi	r25, 0xF9	; 249
 7d6:	b9 2e       	mov	r11, r25
 7d8:	8f 36       	cpi	r24, 0x6F	; 111
 7da:	c1 f0       	breq	.+48     	; 0x80c <vfprintf+0x26c>
 7dc:	18 f4       	brcc	.+6      	; 0x7e4 <vfprintf+0x244>
 7de:	88 35       	cpi	r24, 0x58	; 88
 7e0:	79 f0       	breq	.+30     	; 0x800 <vfprintf+0x260>
 7e2:	b5 c0       	rjmp	.+362    	; 0x94e <__stack+0x4f>
 7e4:	80 37       	cpi	r24, 0x70	; 112
 7e6:	19 f0       	breq	.+6      	; 0x7ee <vfprintf+0x24e>
 7e8:	88 37       	cpi	r24, 0x78	; 120
 7ea:	21 f0       	breq	.+8      	; 0x7f4 <vfprintf+0x254>
 7ec:	b0 c0       	rjmp	.+352    	; 0x94e <__stack+0x4f>
 7ee:	e9 2f       	mov	r30, r25
 7f0:	e0 61       	ori	r30, 0x10	; 16
 7f2:	be 2e       	mov	r11, r30
 7f4:	b4 fe       	sbrs	r11, 4
 7f6:	0d c0       	rjmp	.+26     	; 0x812 <vfprintf+0x272>
 7f8:	fb 2d       	mov	r31, r11
 7fa:	f4 60       	ori	r31, 0x04	; 4
 7fc:	bf 2e       	mov	r11, r31
 7fe:	09 c0       	rjmp	.+18     	; 0x812 <vfprintf+0x272>
 800:	34 fe       	sbrs	r3, 4
 802:	0a c0       	rjmp	.+20     	; 0x818 <vfprintf+0x278>
 804:	29 2f       	mov	r18, r25
 806:	26 60       	ori	r18, 0x06	; 6
 808:	b2 2e       	mov	r11, r18
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0x278>
 80c:	28 e0       	ldi	r18, 0x08	; 8
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	05 c0       	rjmp	.+10     	; 0x81c <vfprintf+0x27c>
 812:	20 e1       	ldi	r18, 0x10	; 16
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <vfprintf+0x27c>
 818:	20 e1       	ldi	r18, 0x10	; 16
 81a:	32 e0       	ldi	r19, 0x02	; 2
 81c:	f8 01       	movw	r30, r16
 81e:	b7 fe       	sbrs	r11, 7
 820:	07 c0       	rjmp	.+14     	; 0x830 <vfprintf+0x290>
 822:	60 81       	ld	r22, Z
 824:	71 81       	ldd	r23, Z+1	; 0x01
 826:	82 81       	ldd	r24, Z+2	; 0x02
 828:	93 81       	ldd	r25, Z+3	; 0x03
 82a:	0c 5f       	subi	r16, 0xFC	; 252
 82c:	1f 4f       	sbci	r17, 0xFF	; 255
 82e:	06 c0       	rjmp	.+12     	; 0x83c <vfprintf+0x29c>
 830:	60 81       	ld	r22, Z
 832:	71 81       	ldd	r23, Z+1	; 0x01
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 5f       	subi	r16, 0xFE	; 254
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	a3 01       	movw	r20, r6
 83e:	0e 94 03 05 	call	0xa06	; 0xa06 <__ultoa_invert>
 842:	88 2e       	mov	r8, r24
 844:	86 18       	sub	r8, r6
 846:	fb 2d       	mov	r31, r11
 848:	ff 77       	andi	r31, 0x7F	; 127
 84a:	3f 2e       	mov	r3, r31
 84c:	36 fe       	sbrs	r3, 6
 84e:	0d c0       	rjmp	.+26     	; 0x86a <vfprintf+0x2ca>
 850:	23 2d       	mov	r18, r3
 852:	2e 7f       	andi	r18, 0xFE	; 254
 854:	a2 2e       	mov	r10, r18
 856:	89 14       	cp	r8, r9
 858:	58 f4       	brcc	.+22     	; 0x870 <vfprintf+0x2d0>
 85a:	34 fe       	sbrs	r3, 4
 85c:	0b c0       	rjmp	.+22     	; 0x874 <vfprintf+0x2d4>
 85e:	32 fc       	sbrc	r3, 2
 860:	09 c0       	rjmp	.+18     	; 0x874 <vfprintf+0x2d4>
 862:	83 2d       	mov	r24, r3
 864:	8e 7e       	andi	r24, 0xEE	; 238
 866:	a8 2e       	mov	r10, r24
 868:	05 c0       	rjmp	.+10     	; 0x874 <vfprintf+0x2d4>
 86a:	b8 2c       	mov	r11, r8
 86c:	a3 2c       	mov	r10, r3
 86e:	03 c0       	rjmp	.+6      	; 0x876 <vfprintf+0x2d6>
 870:	b8 2c       	mov	r11, r8
 872:	01 c0       	rjmp	.+2      	; 0x876 <vfprintf+0x2d6>
 874:	b9 2c       	mov	r11, r9
 876:	a4 fe       	sbrs	r10, 4
 878:	0f c0       	rjmp	.+30     	; 0x898 <vfprintf+0x2f8>
 87a:	fe 01       	movw	r30, r28
 87c:	e8 0d       	add	r30, r8
 87e:	f1 1d       	adc	r31, r1
 880:	80 81       	ld	r24, Z
 882:	80 33       	cpi	r24, 0x30	; 48
 884:	21 f4       	brne	.+8      	; 0x88e <vfprintf+0x2ee>
 886:	9a 2d       	mov	r25, r10
 888:	99 7e       	andi	r25, 0xE9	; 233
 88a:	a9 2e       	mov	r10, r25
 88c:	09 c0       	rjmp	.+18     	; 0x8a0 <vfprintf+0x300>
 88e:	a2 fe       	sbrs	r10, 2
 890:	06 c0       	rjmp	.+12     	; 0x89e <vfprintf+0x2fe>
 892:	b3 94       	inc	r11
 894:	b3 94       	inc	r11
 896:	04 c0       	rjmp	.+8      	; 0x8a0 <vfprintf+0x300>
 898:	8a 2d       	mov	r24, r10
 89a:	86 78       	andi	r24, 0x86	; 134
 89c:	09 f0       	breq	.+2      	; 0x8a0 <vfprintf+0x300>
 89e:	b3 94       	inc	r11
 8a0:	a3 fc       	sbrc	r10, 3
 8a2:	11 c0       	rjmp	.+34     	; 0x8c6 <vfprintf+0x326>
 8a4:	a0 fe       	sbrs	r10, 0
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <vfprintf+0x314>
 8a8:	b2 14       	cp	r11, r2
 8aa:	88 f4       	brcc	.+34     	; 0x8ce <vfprintf+0x32e>
 8ac:	28 0c       	add	r2, r8
 8ae:	92 2c       	mov	r9, r2
 8b0:	9b 18       	sub	r9, r11
 8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <vfprintf+0x330>
 8b4:	b2 14       	cp	r11, r2
 8b6:	60 f4       	brcc	.+24     	; 0x8d0 <vfprintf+0x330>
 8b8:	b6 01       	movw	r22, r12
 8ba:	80 e2       	ldi	r24, 0x20	; 32
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 8c2:	b3 94       	inc	r11
 8c4:	f7 cf       	rjmp	.-18     	; 0x8b4 <vfprintf+0x314>
 8c6:	b2 14       	cp	r11, r2
 8c8:	18 f4       	brcc	.+6      	; 0x8d0 <vfprintf+0x330>
 8ca:	2b 18       	sub	r2, r11
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x332>
 8ce:	98 2c       	mov	r9, r8
 8d0:	21 2c       	mov	r2, r1
 8d2:	a4 fe       	sbrs	r10, 4
 8d4:	10 c0       	rjmp	.+32     	; 0x8f6 <vfprintf+0x356>
 8d6:	b6 01       	movw	r22, r12
 8d8:	80 e3       	ldi	r24, 0x30	; 48
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 8e0:	a2 fe       	sbrs	r10, 2
 8e2:	17 c0       	rjmp	.+46     	; 0x912 <__stack+0x13>
 8e4:	a1 fc       	sbrc	r10, 1
 8e6:	03 c0       	rjmp	.+6      	; 0x8ee <vfprintf+0x34e>
 8e8:	88 e7       	ldi	r24, 0x78	; 120
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <vfprintf+0x352>
 8ee:	88 e5       	ldi	r24, 0x58	; 88
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	b6 01       	movw	r22, r12
 8f4:	0c c0       	rjmp	.+24     	; 0x90e <__stack+0xf>
 8f6:	8a 2d       	mov	r24, r10
 8f8:	86 78       	andi	r24, 0x86	; 134
 8fa:	59 f0       	breq	.+22     	; 0x912 <__stack+0x13>
 8fc:	a1 fe       	sbrs	r10, 1
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
 900:	8b e2       	ldi	r24, 0x2B	; 43
 902:	01 c0       	rjmp	.+2      	; 0x906 <__stack+0x7>
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	a7 fc       	sbrc	r10, 7
 908:	8d e2       	ldi	r24, 0x2D	; 45
 90a:	b6 01       	movw	r22, r12
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 912:	89 14       	cp	r8, r9
 914:	38 f4       	brcc	.+14     	; 0x924 <__stack+0x25>
 916:	b6 01       	movw	r22, r12
 918:	80 e3       	ldi	r24, 0x30	; 48
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 920:	9a 94       	dec	r9
 922:	f7 cf       	rjmp	.-18     	; 0x912 <__stack+0x13>
 924:	8a 94       	dec	r8
 926:	f3 01       	movw	r30, r6
 928:	e8 0d       	add	r30, r8
 92a:	f1 1d       	adc	r31, r1
 92c:	80 81       	ld	r24, Z
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 936:	81 10       	cpse	r8, r1
 938:	f5 cf       	rjmp	.-22     	; 0x924 <__stack+0x25>
 93a:	22 20       	and	r2, r2
 93c:	09 f4       	brne	.+2      	; 0x940 <__stack+0x41>
 93e:	42 ce       	rjmp	.-892    	; 0x5c4 <vfprintf+0x24>
 940:	b6 01       	movw	r22, r12
 942:	80 e2       	ldi	r24, 0x20	; 32
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 c7 04 	call	0x98e	; 0x98e <fputc>
 94a:	2a 94       	dec	r2
 94c:	f6 cf       	rjmp	.-20     	; 0x93a <__stack+0x3b>
 94e:	f6 01       	movw	r30, r12
 950:	86 81       	ldd	r24, Z+6	; 0x06
 952:	97 81       	ldd	r25, Z+7	; 0x07
 954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0x5b>
 956:	8f ef       	ldi	r24, 0xFF	; 255
 958:	9f ef       	ldi	r25, 0xFF	; 255
 95a:	2b 96       	adiw	r28, 0x0b	; 11
 95c:	e2 e1       	ldi	r30, 0x12	; 18
 95e:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__epilogue_restores__>

00000962 <strnlen_P>:
 962:	fc 01       	movw	r30, r24
 964:	05 90       	lpm	r0, Z+
 966:	61 50       	subi	r22, 0x01	; 1
 968:	70 40       	sbci	r23, 0x00	; 0
 96a:	01 10       	cpse	r0, r1
 96c:	d8 f7       	brcc	.-10     	; 0x964 <strnlen_P+0x2>
 96e:	80 95       	com	r24
 970:	90 95       	com	r25
 972:	8e 0f       	add	r24, r30
 974:	9f 1f       	adc	r25, r31
 976:	08 95       	ret

00000978 <strnlen>:
 978:	fc 01       	movw	r30, r24
 97a:	61 50       	subi	r22, 0x01	; 1
 97c:	70 40       	sbci	r23, 0x00	; 0
 97e:	01 90       	ld	r0, Z+
 980:	01 10       	cpse	r0, r1
 982:	d8 f7       	brcc	.-10     	; 0x97a <strnlen+0x2>
 984:	80 95       	com	r24
 986:	90 95       	com	r25
 988:	8e 0f       	add	r24, r30
 98a:	9f 1f       	adc	r25, r31
 98c:	08 95       	ret

0000098e <fputc>:
 98e:	0f 93       	push	r16
 990:	1f 93       	push	r17
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	fb 01       	movw	r30, r22
 998:	23 81       	ldd	r18, Z+3	; 0x03
 99a:	21 fd       	sbrc	r18, 1
 99c:	03 c0       	rjmp	.+6      	; 0x9a4 <fputc+0x16>
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	9f ef       	ldi	r25, 0xFF	; 255
 9a2:	2c c0       	rjmp	.+88     	; 0x9fc <fputc+0x6e>
 9a4:	22 ff       	sbrs	r18, 2
 9a6:	16 c0       	rjmp	.+44     	; 0x9d4 <fputc+0x46>
 9a8:	46 81       	ldd	r20, Z+6	; 0x06
 9aa:	57 81       	ldd	r21, Z+7	; 0x07
 9ac:	24 81       	ldd	r18, Z+4	; 0x04
 9ae:	35 81       	ldd	r19, Z+5	; 0x05
 9b0:	42 17       	cp	r20, r18
 9b2:	53 07       	cpc	r21, r19
 9b4:	44 f4       	brge	.+16     	; 0x9c6 <fputc+0x38>
 9b6:	a0 81       	ld	r26, Z
 9b8:	b1 81       	ldd	r27, Z+1	; 0x01
 9ba:	9d 01       	movw	r18, r26
 9bc:	2f 5f       	subi	r18, 0xFF	; 255
 9be:	3f 4f       	sbci	r19, 0xFF	; 255
 9c0:	31 83       	std	Z+1, r19	; 0x01
 9c2:	20 83       	st	Z, r18
 9c4:	8c 93       	st	X, r24
 9c6:	26 81       	ldd	r18, Z+6	; 0x06
 9c8:	37 81       	ldd	r19, Z+7	; 0x07
 9ca:	2f 5f       	subi	r18, 0xFF	; 255
 9cc:	3f 4f       	sbci	r19, 0xFF	; 255
 9ce:	37 83       	std	Z+7, r19	; 0x07
 9d0:	26 83       	std	Z+6, r18	; 0x06
 9d2:	14 c0       	rjmp	.+40     	; 0x9fc <fputc+0x6e>
 9d4:	8b 01       	movw	r16, r22
 9d6:	ec 01       	movw	r28, r24
 9d8:	fb 01       	movw	r30, r22
 9da:	00 84       	ldd	r0, Z+8	; 0x08
 9dc:	f1 85       	ldd	r31, Z+9	; 0x09
 9de:	e0 2d       	mov	r30, r0
 9e0:	09 95       	icall
 9e2:	89 2b       	or	r24, r25
 9e4:	e1 f6       	brne	.-72     	; 0x99e <fputc+0x10>
 9e6:	d8 01       	movw	r26, r16
 9e8:	16 96       	adiw	r26, 0x06	; 6
 9ea:	8d 91       	ld	r24, X+
 9ec:	9c 91       	ld	r25, X
 9ee:	17 97       	sbiw	r26, 0x07	; 7
 9f0:	01 96       	adiw	r24, 0x01	; 1
 9f2:	17 96       	adiw	r26, 0x07	; 7
 9f4:	9c 93       	st	X, r25
 9f6:	8e 93       	st	-X, r24
 9f8:	16 97       	sbiw	r26, 0x06	; 6
 9fa:	ce 01       	movw	r24, r28
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	08 95       	ret

00000a06 <__ultoa_invert>:
 a06:	fa 01       	movw	r30, r20
 a08:	aa 27       	eor	r26, r26
 a0a:	28 30       	cpi	r18, 0x08	; 8
 a0c:	51 f1       	breq	.+84     	; 0xa62 <__ultoa_invert+0x5c>
 a0e:	20 31       	cpi	r18, 0x10	; 16
 a10:	81 f1       	breq	.+96     	; 0xa72 <__ultoa_invert+0x6c>
 a12:	e8 94       	clt
 a14:	6f 93       	push	r22
 a16:	6e 7f       	andi	r22, 0xFE	; 254
 a18:	6e 5f       	subi	r22, 0xFE	; 254
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	af 4f       	sbci	r26, 0xFF	; 255
 a22:	b1 e0       	ldi	r27, 0x01	; 1
 a24:	3e d0       	rcall	.+124    	; 0xaa2 <__ultoa_invert+0x9c>
 a26:	b4 e0       	ldi	r27, 0x04	; 4
 a28:	3c d0       	rcall	.+120    	; 0xaa2 <__ultoa_invert+0x9c>
 a2a:	67 0f       	add	r22, r23
 a2c:	78 1f       	adc	r23, r24
 a2e:	89 1f       	adc	r24, r25
 a30:	9a 1f       	adc	r25, r26
 a32:	a1 1d       	adc	r26, r1
 a34:	68 0f       	add	r22, r24
 a36:	79 1f       	adc	r23, r25
 a38:	8a 1f       	adc	r24, r26
 a3a:	91 1d       	adc	r25, r1
 a3c:	a1 1d       	adc	r26, r1
 a3e:	6a 0f       	add	r22, r26
 a40:	71 1d       	adc	r23, r1
 a42:	81 1d       	adc	r24, r1
 a44:	91 1d       	adc	r25, r1
 a46:	a1 1d       	adc	r26, r1
 a48:	20 d0       	rcall	.+64     	; 0xa8a <__ultoa_invert+0x84>
 a4a:	09 f4       	brne	.+2      	; 0xa4e <__ultoa_invert+0x48>
 a4c:	68 94       	set
 a4e:	3f 91       	pop	r19
 a50:	2a e0       	ldi	r18, 0x0A	; 10
 a52:	26 9f       	mul	r18, r22
 a54:	11 24       	eor	r1, r1
 a56:	30 19       	sub	r19, r0
 a58:	30 5d       	subi	r19, 0xD0	; 208
 a5a:	31 93       	st	Z+, r19
 a5c:	de f6       	brtc	.-74     	; 0xa14 <__ultoa_invert+0xe>
 a5e:	cf 01       	movw	r24, r30
 a60:	08 95       	ret
 a62:	46 2f       	mov	r20, r22
 a64:	47 70       	andi	r20, 0x07	; 7
 a66:	40 5d       	subi	r20, 0xD0	; 208
 a68:	41 93       	st	Z+, r20
 a6a:	b3 e0       	ldi	r27, 0x03	; 3
 a6c:	0f d0       	rcall	.+30     	; 0xa8c <__ultoa_invert+0x86>
 a6e:	c9 f7       	brne	.-14     	; 0xa62 <__ultoa_invert+0x5c>
 a70:	f6 cf       	rjmp	.-20     	; 0xa5e <__ultoa_invert+0x58>
 a72:	46 2f       	mov	r20, r22
 a74:	4f 70       	andi	r20, 0x0F	; 15
 a76:	40 5d       	subi	r20, 0xD0	; 208
 a78:	4a 33       	cpi	r20, 0x3A	; 58
 a7a:	18 f0       	brcs	.+6      	; 0xa82 <__ultoa_invert+0x7c>
 a7c:	49 5d       	subi	r20, 0xD9	; 217
 a7e:	31 fd       	sbrc	r19, 1
 a80:	40 52       	subi	r20, 0x20	; 32
 a82:	41 93       	st	Z+, r20
 a84:	02 d0       	rcall	.+4      	; 0xa8a <__ultoa_invert+0x84>
 a86:	a9 f7       	brne	.-22     	; 0xa72 <__ultoa_invert+0x6c>
 a88:	ea cf       	rjmp	.-44     	; 0xa5e <__ultoa_invert+0x58>
 a8a:	b4 e0       	ldi	r27, 0x04	; 4
 a8c:	a6 95       	lsr	r26
 a8e:	97 95       	ror	r25
 a90:	87 95       	ror	r24
 a92:	77 95       	ror	r23
 a94:	67 95       	ror	r22
 a96:	ba 95       	dec	r27
 a98:	c9 f7       	brne	.-14     	; 0xa8c <__ultoa_invert+0x86>
 a9a:	00 97       	sbiw	r24, 0x00	; 0
 a9c:	61 05       	cpc	r22, r1
 a9e:	71 05       	cpc	r23, r1
 aa0:	08 95       	ret
 aa2:	9b 01       	movw	r18, r22
 aa4:	ac 01       	movw	r20, r24
 aa6:	0a 2e       	mov	r0, r26
 aa8:	06 94       	lsr	r0
 aaa:	57 95       	ror	r21
 aac:	47 95       	ror	r20
 aae:	37 95       	ror	r19
 ab0:	27 95       	ror	r18
 ab2:	ba 95       	dec	r27
 ab4:	c9 f7       	brne	.-14     	; 0xaa8 <__ultoa_invert+0xa2>
 ab6:	62 0f       	add	r22, r18
 ab8:	73 1f       	adc	r23, r19
 aba:	84 1f       	adc	r24, r20
 abc:	95 1f       	adc	r25, r21
 abe:	a0 1d       	adc	r26, r0
 ac0:	08 95       	ret

00000ac2 <__prologue_saves__>:
 ac2:	2f 92       	push	r2
 ac4:	3f 92       	push	r3
 ac6:	4f 92       	push	r4
 ac8:	5f 92       	push	r5
 aca:	6f 92       	push	r6
 acc:	7f 92       	push	r7
 ace:	8f 92       	push	r8
 ad0:	9f 92       	push	r9
 ad2:	af 92       	push	r10
 ad4:	bf 92       	push	r11
 ad6:	cf 92       	push	r12
 ad8:	df 92       	push	r13
 ada:	ef 92       	push	r14
 adc:	ff 92       	push	r15
 ade:	0f 93       	push	r16
 ae0:	1f 93       	push	r17
 ae2:	cf 93       	push	r28
 ae4:	df 93       	push	r29
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
 aea:	ca 1b       	sub	r28, r26
 aec:	db 0b       	sbc	r29, r27
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	f8 94       	cli
 af2:	de bf       	out	0x3e, r29	; 62
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	cd bf       	out	0x3d, r28	; 61
 af8:	09 94       	ijmp

00000afa <__epilogue_restores__>:
 afa:	2a 88       	ldd	r2, Y+18	; 0x12
 afc:	39 88       	ldd	r3, Y+17	; 0x11
 afe:	48 88       	ldd	r4, Y+16	; 0x10
 b00:	5f 84       	ldd	r5, Y+15	; 0x0f
 b02:	6e 84       	ldd	r6, Y+14	; 0x0e
 b04:	7d 84       	ldd	r7, Y+13	; 0x0d
 b06:	8c 84       	ldd	r8, Y+12	; 0x0c
 b08:	9b 84       	ldd	r9, Y+11	; 0x0b
 b0a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b0c:	b9 84       	ldd	r11, Y+9	; 0x09
 b0e:	c8 84       	ldd	r12, Y+8	; 0x08
 b10:	df 80       	ldd	r13, Y+7	; 0x07
 b12:	ee 80       	ldd	r14, Y+6	; 0x06
 b14:	fd 80       	ldd	r15, Y+5	; 0x05
 b16:	0c 81       	ldd	r16, Y+4	; 0x04
 b18:	1b 81       	ldd	r17, Y+3	; 0x03
 b1a:	aa 81       	ldd	r26, Y+2	; 0x02
 b1c:	b9 81       	ldd	r27, Y+1	; 0x01
 b1e:	ce 0f       	add	r28, r30
 b20:	d1 1d       	adc	r29, r1
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	f8 94       	cli
 b26:	de bf       	out	0x3e, r29	; 62
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	cd bf       	out	0x3d, r28	; 61
 b2c:	ed 01       	movw	r28, r26
 b2e:	08 95       	ret

00000b30 <_exit>:
 b30:	f8 94       	cli

00000b32 <__stop_program>:
 b32:	ff cf       	rjmp	.-2      	; 0xb32 <__stop_program>
