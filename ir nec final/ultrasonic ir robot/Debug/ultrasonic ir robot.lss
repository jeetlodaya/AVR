
ultrasonic ir robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000190  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800102  00800102  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5e  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c5  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057d  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000302  00000000  00000000  000020dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000023df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  9e:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    __asm__ volatile ("" ::: "memory");
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <IR_nec_current_status>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	29 f4       	brne	.+10     	; 0xc4 <__vector_13+0x1e>
  ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  c8:	84 30       	cpi	r24, 0x04	; 4
  ca:	29 f4       	brne	.+10     	; 0xd6 <__vector_13+0x30>
  cc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <nec_current_state>
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <IR_nec_current_status>
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <IR_WriteBuffer>:
	}
}

void IR_WriteBuffer(uint16_t data)
{
	IR_icr_buffer.buffer[IR_icr_buffer.write_index] = data;
  e2:	a5 e0       	ldi	r26, 0x05	; 5
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	99 96       	adiw	r26, 0x29	; 41
  e8:	ec 91       	ld	r30, X
  ea:	99 97       	sbiw	r26, 0x29	; 41
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	eb 5f       	subi	r30, 0xFB	; 251
  f4:	fe 4f       	sbci	r31, 0xFE	; 254
  f6:	91 83       	std	Z+1, r25	; 0x01
  f8:	80 83       	st	Z, r24
	
	if (IR_icr_buffer.write_index == IR_ICR_BUFFER_SIZE - 1)
  fa:	99 96       	adiw	r26, 0x29	; 41
  fc:	8c 91       	ld	r24, X
  fe:	83 31       	cpi	r24, 0x13	; 19
 100:	19 f4       	brne	.+6      	; 0x108 <IR_WriteBuffer+0x26>
	IR_icr_buffer.write_index = 0;
 102:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <IR_icr_buffer+0x29>
 106:	05 c0       	rjmp	.+10     	; 0x112 <IR_WriteBuffer+0x30>
	else
	IR_icr_buffer.write_index++;
 108:	e5 e0       	ldi	r30, 0x05	; 5
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	81 a5       	ldd	r24, Z+41	; 0x29
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	81 a7       	std	Z+41, r24	; 0x29
	
	if (IR_icr_buffer.write_index == IR_icr_buffer.read_index)
 112:	e5 e0       	ldi	r30, 0x05	; 5
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	91 a5       	ldd	r25, Z+41	; 0x29
 118:	80 a5       	ldd	r24, Z+40	; 0x28
 11a:	98 13       	cpse	r25, r24
 11c:	04 c0       	rjmp	.+8      	; 0x126 <IR_WriteBuffer+0x44>
	IR_icr_buffer_status = OVERFLOW;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <IR_icr_buffer_status>
 124:	08 95       	ret
	else
	IR_icr_buffer_status = OK;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <IR_icr_buffer_status>
 12c:	08 95       	ret

0000012e <__vector_10>:
	TCCR1B = 0;
	TIMSK1 = 0;
}

ISR (TIMER1_CAPT_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	TCNT1 = 0;
 150:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 154:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	repeat_timer = 0;
 158:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	IR_WriteBuffer(ICR1);
 15c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 160:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 164:	0e 94 71 00 	call	0xe2	; 0xe2 <IR_WriteBuffer>
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <main>:

#include <avr/io.h>


int main(void)
{
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
