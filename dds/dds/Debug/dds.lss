
dds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002bc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003f6  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000010e  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000283  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d5  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bb  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_7>
  20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  40:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <sine_lut>:
  68:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
  78:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
  88:	da dc de e0 e2 e4 e6 e8 ea eb ed ef f0 f2 f3 f4     ................
  98:	f6 f7 f8 f9 fa fb fb fc fd fd fe fe fe ff ff ff     ................
  a8:	ff ff ff ff fe fe fd fd fc fc fb fa f9 f8 f7 f6     ................
  b8:	f5 f4 f2 f1 ef ee ec eb e9 e7 e5 e3 e1 df dd db     ................
  c8:	d9 d7 d4 d2 cf cd ca c8 c5 c3 c0 bd ba b8 b5 b2     ................
  d8:	af ac a9 a6 a3 a0 9d 9a 97 94 91 8e 8a 87 84 81     ................
  e8:	7e 7b 78 75 71 6e 6b 68 65 62 5f 5c 59 56 53 50     ~{xuqnkheb_\YVSP
  f8:	4d 4a 47 45 42 3f 3c 3a 37 35 32 30 2d 2b 28 26     MJGEB?<:7520-+(&
 108:	24 22 20 1e 1c 1a 18 16 14 13 11 10 0e 0d 0b 0a     $" .............
 118:	09 08 07 06 05 04 03 03 02 02 01 01 00 00 00 00     ................
 128:	00 00 00 01 01 01 02 02 03 04 04 05 06 07 08 09     ................
 138:	0b 0c 0d 0f 10 12 14 15 17 19 1b 1d 1f 21 23 25     .............!#%
 148:	27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c 4f     '*,.1368;>@CFILO
 158:	51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c 80     QTWZ]`cgjmpsvy|.

00000168 <__ctors_end>:
 168:	11 24       	eor	r1, r1
 16a:	1f be       	out	0x3f, r1	; 63
 16c:	cf ef       	ldi	r28, 0xFF	; 255
 16e:	d8 e0       	ldi	r29, 0x08	; 8
 170:	de bf       	out	0x3e, r29	; 62
 172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	e6 e2       	ldi	r30, 0x26	; 38
 17c:	f2 e0       	ldi	r31, 0x02	; 2
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
 180:	05 90       	lpm	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	a2 30       	cpi	r26, 0x02	; 2
 186:	b1 07       	cpc	r27, r17
 188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	a2 e0       	ldi	r26, 0x02	; 2
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	a4 30       	cpi	r26, 0x04	; 4
 196:	b1 07       	cpc	r27, r17
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
 19e:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

000001a2 <__bad_interrupt>:
 1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <__vector_7>:

volatile uint16_t incrementor = FREQ_TO_INCREMENTOR(330);
//PHASOR TO TRACE THE SINE LUT AND INCREMENTOR TO INCREMENT PHASOR BY THAT VALUE

ISR(TIMER2_COMPA_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	OCR2A = pgm_read_byte(sine_lut + (uint8_t)(phasor >> 8));
 1bc:	80 91 02 01 	lds	r24, 0x0102
 1c0:	90 91 03 01 	lds	r25, 0x0103
 1c4:	e9 2f       	mov	r30, r25
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	e8 59       	subi	r30, 0x98	; 152
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	e4 91       	lpm	r30, Z
 1ce:	e0 93 b3 00 	sts	0x00B3, r30
	
	phasor = phasor + incrementor;
 1d2:	20 91 02 01 	lds	r18, 0x0102
 1d6:	30 91 03 01 	lds	r19, 0x0103
 1da:	80 91 00 01 	lds	r24, 0x0100
 1de:	90 91 01 01 	lds	r25, 0x0101
 1e2:	82 0f       	add	r24, r18
 1e4:	93 1f       	adc	r25, r19
 1e6:	90 93 03 01 	sts	0x0103, r25
 1ea:	80 93 02 01 	sts	0x0102, r24
	//LOAD OCR FROM THR LUT AND INCREMENT PHASOR
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <pwm_init>:

void pwm_init()
{
	DDRB |= (1 << PINB3);
 204:	23 9a       	sbi	0x04, 3	; 4
	//PINB2 OUTPUT
	
	TCCR2A = (1 << COM2A1) | (1 << WGM21) | (1 << WGM20) ; 
 206:	83 e8       	ldi	r24, 0x83	; 131
 208:	80 93 b0 00 	sts	0x00B0, r24
	//CLEAR OC2A ON COMPARE AND FAST PWM
	
	TCCR2B = (1 << CS20);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 b1 00 	sts	0x00B1, r24
	//NO PRESCALING 
	
	TIMSK2 = (1 << OCIE2A);
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 93 70 00 	sts	0x0070, r24
	//ENABLE OUTPUT COMPARE INTERRUPT
}
 218:	08 95       	ret

0000021a <main>:

int main(void)
{
	pwm_init();
 21a:	0e 94 02 01 	call	0x204	; 0x204 <pwm_init>
	//CALL PWM INIT
	
	sei();
 21e:	78 94       	sei
 220:	ff cf       	rjmp	.-2      	; 0x220 <main+0x6>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
